import java_cup.runtime.*;

parser code {:
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/* Symbol Lists */
/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, LBRACK, RBRACK, COMMA, IF, ELSE, PREFIX, REVERSE, IDENT;
terminal String     STRING_LITERAL;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal        begin, fdecl, decl, fcall, declname, body, declargs, returned, concat, call, callname, callargs, multargs, fcall_arg,
                    ifbody, cond, str, call_str, body_call;

/* Precedence Declarations */
precedence left     ELSE;

/* The Grammar Rules */
begin     ::= fdecl:fd fcall:fc                         {: System.out.println("public static void main(String[] args){\n"+fc+"\n}\n");
                                                        System.out.println(fd);:}
;

/* FUNCTION DECLARATION */
fdecl     ::= fdecl:fd decl:d                           {: RESULT = fd+"\n\n"+d; :}
             |decl:d                                    {: RESULT = d; :}
;
decl      ::= declname:d body:b RBRACK                  {: RESULT = "public static String "+d+"{\n"+b+"\n}"; :}
;
declname  ::= IDENT:i LPAREN declargs:d RPAREN LBRACK   {: RESULT = i+"("+d+")"; :}
             |IDENT:i LPAREN RPAREN LBRACK              {: RESULT = i+"()"; :}
;
declargs  ::= declargs:d COMMA IDENT:i                  {: RESULT = d+", "+i; :}
             |IDENT:i                                   {: RESULT = i; :}
;

/* FUNCTION CALL */
fcall     ::= call:c fcall:fc                           {: RESULT = "\tSystem.out.println("+c+");\n"+fc; :}
             |call:c                                    {: RESULT = "\tSystem.out.println("+c+");"; :}
;
fcall_arg ::= call:c fcall:fc                           {: RESULT = c+""+fc; :}
             |call:c                                    {: RESULT = c; :}
;
call      ::= callname:c                                {: RESULT = c; :}
;
callname  ::= IDENT:i LPAREN callargs:c RPAREN          {: RESULT = i+"("+c+")"; :}
             |IDENT:i LPAREN RPAREN                     {: RESULT = i+"()"; :}
;
callargs  ::= callargs:c COMMA body_call:b              {: RESULT = c+", "+b; :}
             |body_call:b                               {: RESULT = b; :}
;
body_call ::= body_call:b PLUS call_str:s               {: RESULT = b+"+"+s; :}
             |call_str:s                                {: RESULT = s; :}
;
call_str ::= STRING_LITERAL:s                           {: RESULT = "\""+s+"\""; :}
             |ifbody:b                                  {: RESULT = b; :}
             |fcall_arg:f                               {: RESULT = f; :}
             |REVERSE call_str:s                        {: RESULT = s; :}
;

/* OTHERS */
multargs  ::= STRING_LITERAL:s                          {: RESULT = "\""+s+"\""; :}
             |fcall_arg:f                               {: RESULT = f; :}
;
body      ::= body:b PLUS str:s                         {: RESULT = b+"+"+s; :}
             |str:s                                     {: RESULT = s; :}
;
str       ::= STRING_LITERAL:s                          {: RESULT = "\""+s+"\""; :}
             |IDENT:i                                   {: RESULT = i; :}
             |ifbody:b                                  {: RESULT = b; :}
             |fcall_arg:f                               {: RESULT = f; :}
             |REVERSE str:s                             {: RESULT = "reverse "+s; :}
;

/* IF ELSE */
/* ifbody    ::= IF LPAREN cond:c RPAREN ifexpr:i ELSE elsexpr:e {: RESULT = c+" ? "+i+" : "+e; :} */
ifbody    ::= IF LPAREN cond:c RPAREN body:b1 ELSE body:b2 {: RESULT = "if("+c+")\n"+"return "+b1+"\nelse\nreturn "+b2; :}
;
cond      ::= STRING_LITERAL:s                          {: RESULT = "\""+s+"\""; :}

;
