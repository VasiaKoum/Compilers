import java_cup.runtime.*;

parser code {:
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/* Symbol Lists */
/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, LBRACK, RBRACK, COMMA, IF, ELSE, PREFIX, REVERSE, IDENT;
terminal String     STRING_LITERAL;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal        begin, fdecl, func, fcall, name, body, args, returned, concat, call, name2, args2, multargs;

/* Precedence Declarations */
precedence left     ELSE;

/* The Grammar Rules */
begin     ::= fdecl:fd fcall:fc                 {: System.out.println("public static void main(String[] args){\n"+fc+"\n}\n");
                                                    System.out.println(fd);:}
;
fdecl     ::= fdecl:fd2 func:f                  {: RESULT = fd2+"\n\n"+f; :}
             |func:f2                           {: RESULT = f2; :}
;
func      ::= name:n body:b RBRACK               {: RESULT = "public static String "+n+"{\n"+b+"\n}"; :}
;
name      ::= IDENT:i LPAREN args:a RPAREN LBRACK     {: RESULT = i+"("+a+")"; :}
            |IDENT:i LPAREN RPAREN LBRACK     {: RESULT = i+"()"; :}
;
args      ::= args:a COMMA IDENT:i              {: RESULT = a+", "+i; :}
             |IDENT:i                           {: RESULT = i; :}
;
fcall     ::= fcall:fc call:c                   {: RESULT = fc+"\n"+c; :}
             |call:c
;
call      ::= name2:n                           {: RESULT = n; :}
;
name2     ::= IDENT:i LPAREN args2:a RPAREN     {: RESULT = i+"("+a+")"; :}
            |IDENT:i LPAREN RPAREN              {: RESULT = i+"()"; :}
;
args2     ::= args2:a COMMA multargs:m          {: RESULT = a+", "+m; :}
             |STRING_LITERAL:s                  {: RESULT = "\""+s+"\""; :}
;
multargs  ::= STRING_LITERAL:s                  {: RESULT = "\""+s+"\""; :}
;
body      ::= returned:r                        {: RESULT = "\treturn "+r+";"; :}
;
returned  ::= returned:r PLUS concat:c          {: RESULT = r+" + "+c; :}
             |STRING_LITERAL:s                  {: RESULT = "\""+s+"\""; :}
             |IDENT:id                          {: RESULT = id; :}
;
concat    ::= STRING_LITERAL:s                  {: RESULT = "\""+s+"\""; :}
             |IDENT:id                          {: RESULT = id; :}
;
